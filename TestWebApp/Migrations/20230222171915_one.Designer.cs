// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestWebApp.EF;

#nullable disable

namespace TestWebApp.Migrations
{
    [DbContext(typeof(OfferContext))]
    [Migration("20230222171915_one")]
    partial class one
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestWebApp.Models.ArtistTitleOffer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("delivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("media")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("originalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("starring")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("ArtistTitleOffers");
                });

            modelBuilder.Entity("TestWebApp.Models.AudiobookOffer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("downloadable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("performanceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("performedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("recordingLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("AudiobookOffers");
                });

            modelBuilder.Entity("TestWebApp.Models.BookOffer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("binding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("delivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("downloadable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localDeliveryCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pageExtent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("part")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("volume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("BookOffers");
                });

            modelBuilder.Entity("TestWebApp.Models.EventTicketOffer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("delivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hallPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hallPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isKids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("isPremiere")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localDeliveryCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("EventTicketOffers");
                });

            modelBuilder.Entity("TestWebApp.Models.TourOffer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dataTour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("days")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("delivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hotelStars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("included")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localDeliveryCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("meal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("transport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("worldRegion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TourOffers");
                });

            modelBuilder.Entity("TestWebApp.Models.VendorModelOffer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("available")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("categoryIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cbid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("countryOforigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("currencyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("delivery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("localDeliveryCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturerWarranty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typePrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vendor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("vendorCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("VendorModelOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
